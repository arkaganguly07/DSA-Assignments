A tree is a nonlinear hierarchical data structure that consists of nodes connected by edges.

Generic Trees(N-ary Trees):
The Generic trees are the N-ary trees which have the following properties:-
1. Many children at every node.
2. The number of nodes for each node is not known in advance.

Why Tree Data Structure?
ðŸŽ± Other data structures such as arrays, linked list, stack, and queue are linear data structures that store data sequentially. In order to perform any operation in a linear data structure, the time complexity increases with the increase in the data size. But, it is not acceptable in today's computational world.
ðŸŽ± Different tree data structures allow quicker and easier access to the data as it is a non-linear data structure.

Tree Terminologies:
âœ” Node:-
A node is an entity that contains a key or value and pointers to its child nodes. The last nodes of each path are called leaf nodes or external nodes that do not contain a link/pointer to child nodes. The node having at least a child node is called an internal node.

âœ” Edge:-
It is the link between any two nodes.

âœ” Root:-
It is the topmost node of a tree.

âœ” Height of a Node:-
The height of a node is the number of edges from the node to the deepest leaf (ie. the longest path from the node to a leaf node).

âœ” Depth of a Node:-
The depth of a node is the number of edges from the root to the node.

âœ” Height of a Tree:-
The height of a Tree is the height of the root node or the depth of the deepest node.

âœ” Degree of a Node:-
The degree of a node is the total number of branches of that node.

âœ” Forest:-
A collection of disjoint trees is called a forest.

Tree Applications:
ðŸŽ± Binary Search Trees(BSTs) are used to quickly check whether an element is present in a set or not.
ðŸŽ± Heap is a kind of tree that is used for heap sort.
ðŸŽ± A modified version of a tree called Tries is used in modern routers to store routing information.
ðŸŽ± Most popular databases use B-Trees and T-Trees, which are variants of the tree structure we learned above to store their data
ðŸŽ± Compilers use a syntax tree to validate the syntax of every program you write.

Tree Traversal - inorder, preorder and postorder:
âœ” Inorder traversal:-
Step 1: First, visit all the nodes in the left subtree
Step 2: Then the root node
Step 3: Visit all the nodes in the right subtree
// Code-
inorder(root->left)
display(root->data)
inorder(root->right)

âœ” Preorder traversal:-
Step 1: Visit root node
Step 2: Visit all the nodes in the left subtree
Step 3: Visit all the nodes in the right subtree
// Code-
display(root->data)
preorder(root->left)
preorder(root->right)

âœ” Postorder traversal:-
Step 1: Visit all the nodes in the left subtree
Step 2: Visit all the nodes in the right subtree
Step 3: Visit the root node
// Code-
postorder(root->left)
postorder(root->right)
display(root->data)

Binary Tree:
A binary tree is a tree data structure in which each parent node can have at most two children. Each node of a binary tree consists of three items:
ðŸŽ± data item
ðŸŽ± address of left child
ðŸŽ± address of right child

Types of Binary Tree:
1. Full Binary Tree - A full Binary tree is a special type of binary tree in which every parent node/internal node has either two or no children.
2. Perfect Binary Tree - A perfect binary tree is a type of binary tree in which every internal node has exactly two child nodes and all the leaf nodes are at the same level.
3. Complete Binary Tree -
A complete binary tree is just like a full binary tree, but with two major differences
ðŸŽ± Every level must be completely filled
ðŸŽ± All the leaf elements must lean towards the left.
ðŸŽ± The last leaf element might not have a right sibling i.e. a complete binary tree doesn't have to be a full binary tree.
4. Degenerate or Pathological Tree - A degenerate or pathological tree is the tree having a single child either left or right.
5. Skewed Binary Tree - A skewed binary tree is a pathological/degenerate tree in which the tree is either dominated by the left nodes or the right nodes. Thus, there are two types of skewed binary tree: left-skewed binary tree and right-skewed binary tree.
6. Balanced Binary Tree - It is a type of binary tree in which the difference between the height of the left and the right subtree for each node is either 0 or 1.

Binary Search Tree (BST):
Binary search tree is a data structure that quickly allows us to maintain a sorted list of numbers.
It is called a binary tree because each tree node has a maximum of two children.
It is called a search tree because it can be used to search for the presence of a number in O(log(n)) time.

The properties that separate a binary search tree from a regular binary tree is
ðŸŽ± All nodes of left subtree are less than the root node
ðŸŽ± All nodes of right subtree are more than the root node
ðŸŽ± Both subtrees of each node are also BSTs i.e. they have the above two properties

Binary Search Tree Complexities:
âœ” Time Complexity:-
Operation	Best Case Complexity	Average Case Complexity	   Worst Case Complexity
Search	        O(log n)	              O(log n)	                  O(n)
Insertion	    O(log n)	              O(log n)	                  O(n)
Deletion	    O(log n)	              O(log n)	                  O(n)
Here, n is the number of nodes in the tree.

âœ” Space Complexity:-
The space complexity for all the operations is O(n).

Binary Search Tree Applications:
ðŸŽ± In multilevel indexing in the database
ðŸŽ± For dynamic sorting
ðŸŽ± For managing virtual memory areas in Unix kernel

B-tree:
B-tree is a special type of self-balancing search tree in which each node can contain more than one key and can have more than two children. It is a generalized form of the binary search tree. It is also known as a height-balanced m-way tree.

Why do you need a B-tree data strcuture?
The need for B-tree arose with the rise in the need for lesser time in accessing the physical storage media like a hard disk. The secondary storage devices are slower with a larger capacity. There was a need for such types of data structures that minimize the disk accesses. Other data structures such as a binary search tree, avl tree, red-black tree, etc can store only one key in one node. If you have to store a large number of keys, then the height of such trees becomes very large and the access time increases. However, B-tree can store many keys in a single node and can have multiple child nodes. This decreases the height significantly allowing faster disk accesses.

B-tree Properties:
ðŸŽ± For each node x, the keys are stored in increasing order.
ðŸŽ± In each node, there is a boolean value x.leaf which is true if x is a leaf.
ðŸŽ± If n is the order of the tree, each internal node can contain at most n - 1 keys along with a pointer to each child.
ðŸŽ± Each node except root can have at most n children and at least n/2 children.
ðŸŽ± All leaves have the same depth (i.e. height-h of the tree).
ðŸŽ± The root has at least 2 children and contains a minimum of 1 key.
ðŸŽ± If n â‰¥ 1, then for any n-key B-tree of height h and minimum degree t â‰¥ 2, h â‰¥ logt (n+1)/2.

Operations on a B-tree:
âœ” Searching an element in a B-tree:-
Searching for an element in a B-tree is the generalized form of searching an element in a Binary Search Tree. The following steps are followed-
Step 1: Starting from the root node, compare k with the first key of the node.
Step 2: If k = the first key of the node, return the node and the index.
Step 3: If k.leaf = true, return NULL (i.e. not found).
Step 4: If k < the first key of the root node, search the left child of this key recursively.
Step 5: If there is more than one key in the current node and k > the first key, compare k with the next key in the node.
Step 6: If k < next key, search the left child of this key (ie. k lies in between the first and the second keys).
Step 7: Else, search the right child of the key.
Step 8: Repeat steps 1 to 4 until the leaf is reached.

Searching Complexity on B Tree:
ðŸŽ± Worst case Time complexity: Î˜(log n)
ðŸŽ± Average case Time complexity: Î˜(log n)
ðŸŽ± Best case Time complexity: Î˜(log n)
ðŸŽ± Average case Space complexity: Î˜(n)
ðŸŽ± Worst case Space complexity: Î˜(n)

B Tree Applications:
ðŸŽ± databases and file systems
ðŸŽ± to store blocks of data (secondary storage media)
ðŸŽ± multilevel indexing